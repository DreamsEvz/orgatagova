datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  bio           String?
  isActive      Boolean         @default(true)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support

  createdCarpools Carpool[]             @relation("CarpoolCreator")
  joinedCarpools  CarpoolParticipants[]
  soberDriverFor  Carpool[]             @relation("SoberDriver")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([isActive])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@index([userId])
}

model Carpool {
  id                  String   @id @default(cuid())
  title               String
  departure           String
  arrival             String
  description         String?
  departureDate       DateTime
  departureTime       String // Format: "HH:MM"
  returnDate          DateTime? // For round trips
  returnTime          String?
  availableSeats      Int      @default(1)
  totalSeats          Int      @default(4)
  price               Float?   // Price per seat
  currency            String   @default("USD")
  isDriverSoberNeeded Boolean  @default(false)
  soberDriverFound    Boolean  @default(false)
  isPrivate           Boolean  @default(false)
  invitationCode      String   @unique
  isArchived          Boolean  @default(false)
  isFinished          Boolean  @default(false)
  status              CarpoolStatus @default(ACTIVE)
  
  // Location details
  departureLatitude   Float?
  departureLongitude  Float?
  arrivalLatitude     Float?
  arrivalLongitude    Float?

  createdBy User   @relation("CarpoolCreator", fields: [creatorId], references: [id])
  creatorId String

  participants CarpoolParticipants[]
  soberDriver  User?                 @relation("SoberDriver", fields: [soberDriverId], references: [id])
  soberDriverId    String?

  carpoolGroup CarpoolGroup?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
  @@index([departureDate])
  @@index([status])
  @@index([isPrivate])
  @@index([isArchived])
  @@index([invitationCode])
}

model CarpoolParticipants {
  id        String   @id @default(cuid())
  userId    String
  carpoolId String
  status    ParticipantStatus @default(JOINED)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  seatNumber Int?    // Which seat they're taking

  user    User    @relation(fields: [userId], references: [id])
  carpool Carpool @relation(fields: [carpoolId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, carpoolId])
  @@index([userId])
  @@index([carpoolId])
  @@index([status])
}

model CarpoolGroup {
  id String @id @default(cuid())
  name String
  description String?
  carpoolId String @unique
  carpool Carpool @relation(fields: [carpoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([carpoolId])
}

// Enums for better type safety
enum CarpoolStatus {
  ACTIVE
  FULL
  CANCELLED
  COMPLETED
  EXPIRED
}

enum ParticipantStatus {
  JOINED
  LEFT
  REMOVED
  PENDING // For private carpools that need approval
}
