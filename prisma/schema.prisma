datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support

  createdCarpools Carpool[]             @relation("CarpoolCreator")
  joinedCarpools  CarpoolParticipants[]
  soberDriverFor  Carpool[]             @relation("SoberDriver")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Carpool {
  id                  Int      @id @default(autoincrement())
  departure           String
  arrival             String
  description         String?
  departureDate       DateTime
  departureTime       String
  availableSeats      Int
  isDriverSoberNeeded Boolean  @default(false)
  soberDriverFound    Boolean  @default(false)
  isPrivate           Boolean  @default(false)
  privateCode         String?  @unique
  isArchived          Boolean  @default(false)
  isFinished          Boolean  @default(false)

  createdBy User   @relation("CarpoolCreator", fields: [creatorId], references: [id])
  creatorId String

  participants CarpoolParticipants[]
  soberDriver  User?                 @relation("SoberDriver", fields: [soberDriverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  soberDriverId    String?
}

model CarpoolParticipants {
  id        Int    @id @default(autoincrement())
  userId    String
  carpoolId Int

  user    User    @relation(fields: [userId], references: [id])
  carpool Carpool @relation(fields: [carpoolId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, carpoolId]) // Un utilisateur ne peut rejoindre le mÃªme covoiturage qu'une seule fois
}
